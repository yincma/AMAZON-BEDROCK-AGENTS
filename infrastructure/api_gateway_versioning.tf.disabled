# API Gateway 版本控制配置
# 支持多版本API演进，向后兼容性，阶段管理
# 
# 版本化策略：
# - 路径版本化：/v1/, /v2/ 作为URL前缀
# - 向后兼容：v1版本保持现有API结构
# - 阶段管理：dev, staging, prod环境隔离
# - Lambda映射：支持不同版本调用不同函数

# ============================================================================
# 版本控制变量定义
# ============================================================================

# API版本配置
variable "api_versions" {
  description = "API版本配置"
  type = map(object({
    version_name     = string
    description      = string
    stage_name       = string
    is_default       = bool
    lambda_mappings  = map(string)  # 版本特定的Lambda函数映射
    deprecation_date = string       # 版本弃用日期
    status          = string        # active, deprecated, retired
  }))
  default = {
    v1 = {
      version_name     = "v1"
      description      = "API Version 1 - Legacy endpoints for backward compatibility"
      stage_name       = "v1"
      is_default       = true
      lambda_mappings  = {
        "generate_presentation" = "generate_presentation"
        "presentation_status"   = "presentation_status"
        "presentation_download" = "presentation_download"
        "modify_slide"         = "modify_slide"
        "get_task"             = "presentation_status"
        "list_presentations"   = "list_presentations"
      }
      deprecation_date = "2026-12-31"
      status          = "active"
    }
    v2 = {
      version_name     = "v2"
      description      = "API Version 2 - Enhanced endpoints with improved features"
      stage_name       = "v2"
      is_default       = false
      lambda_mappings  = {
        "generate_presentation" = "generate_presentation_v2"
        "presentation_status"   = "presentation_status_v2"
        "presentation_download" = "presentation_download"
        "modify_slide"         = "modify_slide_v2"
        "get_task"             = "presentation_status_v2"
        "list_presentations"   = "list_presentations_v2"
      }
      deprecation_date = ""
      status          = "active"
    }
  }
}

# 阶段配置
variable "api_stages" {
  description = "API Gateway阶段配置"
  type = map(object({
    stage_name           = string
    deployment_id        = string
    description          = string
    cache_enabled        = bool
    cache_ttl_seconds   = number
    throttle_rate_limit  = number
    throttle_burst_limit = number
    log_level           = string
    data_trace_enabled  = bool
    metrics_enabled     = bool
  }))
  default = {
    dev = {
      stage_name           = "dev"
      deployment_id        = ""
      description          = "Development stage for testing"
      cache_enabled        = false
      cache_ttl_seconds   = 0
      throttle_rate_limit  = 50
      throttle_burst_limit = 100
      log_level           = "INFO"
      data_trace_enabled  = true
      metrics_enabled     = true
    }
    staging = {
      stage_name           = "staging"
      deployment_id        = ""
      description          = "Staging stage for pre-production testing"
      cache_enabled        = true
      cache_ttl_seconds   = 300
      throttle_rate_limit  = 100
      throttle_burst_limit = 200
      log_level           = "ERROR"
      data_trace_enabled  = false
      metrics_enabled     = true
    }
    prod = {
      stage_name           = "prod"
      deployment_id        = ""
      description          = "Production stage"
      cache_enabled        = true
      cache_ttl_seconds   = 600
      throttle_rate_limit  = 200
      throttle_burst_limit = 400
      log_level           = "ERROR"
      data_trace_enabled  = false
      metrics_enabled     = true
    }
  }
}

# ============================================================================
# 版本化资源结构
# ============================================================================

# 版本根资源 /v1, /v2
resource "aws_api_gateway_resource" "version_roots" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = module.api_gateway.rest_api_root_resource_id
  path_part   = each.value.version_name
}

# 版本化presentations资源 /v1/presentations, /v2/presentations
resource "aws_api_gateway_resource" "versioned_presentations" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.version_roots[each.key].id
  path_part   = "presentations"
}

# 版本化presentation ID资源 /v1/presentations/{id}, /v2/presentations/{id}
resource "aws_api_gateway_resource" "versioned_presentation_id" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.versioned_presentations[each.key].id
  path_part   = "{id}"
}

# 版本化下载资源 /v1/presentations/{id}/download, /v2/presentations/{id}/download
resource "aws_api_gateway_resource" "versioned_presentation_download" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.versioned_presentation_id[each.key].id
  path_part   = "download"
}

# 版本化幻灯片资源 /v1/presentations/{id}/slides, /v2/presentations/{id}/slides
resource "aws_api_gateway_resource" "versioned_slides" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.versioned_presentation_id[each.key].id
  path_part   = "slides"
}

# 版本化幻灯片ID资源 /v1/presentations/{id}/slides/{slideId}, /v2/presentations/{id}/slides/{slideId}
resource "aws_api_gateway_resource" "versioned_slide_id" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.versioned_slides[each.key].id
  path_part   = "{slideId}"
}

# 版本化任务资源 /v1/tasks, /v2/tasks
resource "aws_api_gateway_resource" "versioned_tasks" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.version_roots[each.key].id
  path_part   = "tasks"
}

# 版本化任务ID资源 /v1/tasks/{task_id}, /v2/tasks/{task_id}
resource "aws_api_gateway_resource" "versioned_task_id" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.versioned_tasks[each.key].id
  path_part   = "{task_id}"
}

# 版本化健康检查资源 /v1/health, /v2/health
resource "aws_api_gateway_resource" "versioned_health" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = aws_api_gateway_resource.version_roots[each.key].id
  path_part   = "health"
}

# ============================================================================
# 版本化API方法定义
# ============================================================================

# POST /v{n}/presentations - 生成演示文稿
resource "aws_api_gateway_method" "versioned_create_presentation" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method      = "POST"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.header.Content-Type" = true
    "method.request.header.Accept"       = false
  }

  request_validator_id = aws_api_gateway_request_validator.validate_body.id
  request_models = {
    "application/json" = aws_api_gateway_model.generate_presentation_request.name
  }
}

# GET /v{n}/presentations/{id} - 获取演示文稿状态
resource "aws_api_gateway_method" "versioned_get_presentation" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_presentation_id[each.key].id
  http_method      = "GET"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.path.id" = true
  }

  request_validator_id = aws_api_gateway_request_validator.validate_parameters.id
}

# GET /v{n}/presentations/{id}/download - 下载演示文稿
resource "aws_api_gateway_method" "versioned_download_presentation" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_presentation_download[each.key].id
  http_method      = "GET"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.path.id" = true
  }

  request_validator_id = aws_api_gateway_request_validator.validate_parameters.id
}

# PATCH /v{n}/presentations/{id}/slides/{slideId} - 修改幻灯片
resource "aws_api_gateway_method" "versioned_modify_slide" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_slide_id[each.key].id
  http_method      = "PATCH"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.path.id"              = true
    "method.request.path.slideId"         = true
    "method.request.header.Content-Type" = true
  }

  request_validator_id = aws_api_gateway_request_validator.validate_all.id
  request_models = {
    "application/json" = aws_api_gateway_model.modify_slide_request.name
  }
}

# GET /v{n}/tasks/{task_id} - 获取任务状态
resource "aws_api_gateway_method" "versioned_get_task" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_task_id[each.key].id
  http_method      = "GET"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.path.task_id" = true
  }

  request_validator_id = aws_api_gateway_request_validator.validate_parameters.id
}

# GET /v{n}/presentations - 列出演示文稿
resource "aws_api_gateway_method" "versioned_list_presentations" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method      = "GET"
  authorization    = "NONE"
  api_key_required = true

  request_parameters = {
    "method.request.querystring.limit"  = false
    "method.request.querystring.offset" = false
    "method.request.querystring.status" = false
  }
}

# GET /v{n}/health - 健康检查
resource "aws_api_gateway_method" "versioned_health" {
  for_each = var.api_versions

  rest_api_id      = module.api_gateway.rest_api_id
  resource_id      = aws_api_gateway_resource.versioned_health[each.key].id
  http_method      = "GET"
  authorization    = "NONE"
  api_key_required = false  # 健康检查不需要API密钥
}

# ============================================================================
# 版本化Lambda集成
# ============================================================================

# Lambda函数映射助手函数
locals {
  # 为每个版本创建Lambda函数映射
  version_lambda_integrations = {
    for version_key, version_config in var.api_versions : version_key => {
      for endpoint, lambda_name in version_config.lambda_mappings : endpoint => {
        version     = version_key
        lambda_name = lambda_name
        invoke_arn  = lookup(module.lambda.function_invoke_arns, lambda_name, "")
      }
    }
  }
}

# POST /v{n}/presentations 集成
resource "aws_api_gateway_integration" "versioned_create_presentation" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_create_presentation[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = module.lambda.function_invoke_arns[each.value.lambda_mappings["generate_presentation"]]
  timeout_milliseconds   = 29000

  depends_on = [
    aws_api_gateway_method.versioned_create_presentation,
    module.lambda
  ]
}

# GET /v{n}/presentations/{id} 集成
resource "aws_api_gateway_integration" "versioned_get_presentation" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentation_id[each.key].id
  http_method = aws_api_gateway_method.versioned_get_presentation[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = module.lambda.function_invoke_arns[each.value.lambda_mappings["presentation_status"]]
  timeout_milliseconds   = 10000

  depends_on = [
    aws_api_gateway_method.versioned_get_presentation,
    module.lambda
  ]
}

# GET /v{n}/presentations/{id}/download 集成
resource "aws_api_gateway_integration" "versioned_download_presentation" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentation_download[each.key].id
  http_method = aws_api_gateway_method.versioned_download_presentation[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = module.lambda.function_invoke_arns[each.value.lambda_mappings["presentation_download"]]
  timeout_milliseconds   = 10000

  depends_on = [
    aws_api_gateway_method.versioned_download_presentation,
    module.lambda
  ]
}

# PATCH /v{n}/presentations/{id}/slides/{slideId} 集成
resource "aws_api_gateway_integration" "versioned_modify_slide" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_slide_id[each.key].id
  http_method = aws_api_gateway_method.versioned_modify_slide[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = module.lambda.function_invoke_arns[each.value.lambda_mappings["modify_slide"]]
  timeout_milliseconds   = 30000

  depends_on = [
    aws_api_gateway_method.versioned_modify_slide,
    module.lambda
  ]
}

# GET /v{n}/tasks/{task_id} 集成
resource "aws_api_gateway_integration" "versioned_get_task" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_task_id[each.key].id
  http_method = aws_api_gateway_method.versioned_get_task[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = module.lambda.function_invoke_arns[each.value.lambda_mappings["get_task"]]
  timeout_milliseconds   = 10000

  depends_on = [
    aws_api_gateway_method.versioned_get_task,
    module.lambda
  ]
}

# GET /v{n}/presentations 集成
resource "aws_api_gateway_integration" "versioned_list_presentations" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_list_presentations[each.key].http_method

  integration_http_method = "POST"
  type                   = "AWS_PROXY"
  uri                    = "arn:aws:apigateway:${var.aws_region}:lambda:path/2015-03-31/functions/${aws_lambda_function.list_presentations.arn}/invocations"
  timeout_milliseconds   = 10000

  depends_on = [
    aws_api_gateway_method.versioned_list_presentations,
    module.lambda
  ]
}

# GET /v{n}/health Mock集成（所有版本相同）
resource "aws_api_gateway_integration" "versioned_health" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_health[each.key].id
  http_method = aws_api_gateway_method.versioned_health[each.key].http_method

  type = "MOCK"

  request_templates = {
    "application/json" = jsonencode({
      statusCode = 200
    })
  }

  depends_on = [aws_api_gateway_method.versioned_health]
}

# ============================================================================
# Lambda权限配置
# ============================================================================

# 为每个版本的每个端点配置Lambda权限
resource "aws_lambda_permission" "versioned_api_gateway_permissions" {
  for_each = {
    for item in flatten([
      for version_key, version_config in var.api_versions : [
        for endpoint, lambda_name in version_config.lambda_mappings : {
          key         = "${version_key}-${endpoint}"
          version     = version_key
          endpoint    = endpoint
          lambda_name = lambda_name
        }
      ]
    ]) : item.key => item
  }

  statement_id  = "AllowAPIGatewayInvoke-${each.value.version}-${each.value.endpoint}"
  action        = "lambda:InvokeFunction"
  function_name = module.lambda.function_names[each.value.lambda_name]
  principal     = "apigateway.amazonaws.com"
  source_arn    = "arn:aws:execute-api:${var.aws_region}:${data.aws_caller_identity.current.account_id}:${module.api_gateway.rest_api_id}/*/*"

  depends_on = [module.lambda, module.api_gateway]
}

# list_presentations Lambda函数权限（特殊处理）
resource "aws_lambda_permission" "versioned_list_presentations_permissions" {
  for_each = var.api_versions

  statement_id  = "AllowAPIGatewayInvoke-${each.key}-list-presentations"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.list_presentations.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "arn:aws:execute-api:${var.aws_region}:${data.aws_caller_identity.current.account_id}:${module.api_gateway.rest_api_id}/*/*"

  depends_on = [aws_lambda_function.list_presentations, module.api_gateway]
}

# ============================================================================
# 方法响应配置
# ============================================================================

# POST /v{n}/presentations 方法响应
resource "aws_api_gateway_method_response" "versioned_create_presentation_202" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_create_presentation[each.key].http_method
  status_code = "202"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# GET /v{n}/presentations/{id} 方法响应
resource "aws_api_gateway_method_response" "versioned_get_presentation_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentation_id[each.key].id
  http_method = aws_api_gateway_method.versioned_get_presentation[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# GET /v{n}/presentations/{id}/download 方法响应
resource "aws_api_gateway_method_response" "versioned_download_presentation_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentation_download[each.key].id
  http_method = aws_api_gateway_method.versioned_download_presentation[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Content-Type"                 = true
    "method.response.header.Content-Disposition"         = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/octet-stream" = "Empty"
  }
}

# PATCH /v{n}/presentations/{id}/slides/{slideId} 方法响应
resource "aws_api_gateway_method_response" "versioned_modify_slide_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_slide_id[each.key].id
  http_method = aws_api_gateway_method.versioned_modify_slide[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# GET /v{n}/tasks/{task_id} 方法响应
resource "aws_api_gateway_method_response" "versioned_get_task_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_task_id[each.key].id
  http_method = aws_api_gateway_method.versioned_get_task[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# GET /v{n}/presentations 方法响应
resource "aws_api_gateway_method_response" "versioned_list_presentations_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_list_presentations[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# GET /v{n}/health 方法响应
resource "aws_api_gateway_method_response" "versioned_health_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_health[each.key].id
  http_method = aws_api_gateway_method.versioned_health[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.API-Version"                  = true
  }

  response_models = {
    "application/json" = "Empty"
  }
}

# ============================================================================
# 集成响应配置
# ============================================================================

# GET /v{n}/health 集成响应
resource "aws_api_gateway_integration_response" "versioned_health_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_health[each.key].id
  http_method = aws_api_gateway_method.versioned_health[each.key].http_method
  status_code = aws_api_gateway_method_response.versioned_health_200[each.key].status_code

  response_templates = {
    "application/json" = jsonencode({
      status     = "healthy"
      version    = each.value.version_name
      timestamp  = "$context.requestTime"
      stage      = each.value.stage_name
      api_status = each.value.status
    })
  }

  response_parameters = {
    "method.response.header.Access-Control-Allow-Origin" = "'*'"
    "method.response.header.API-Version"                 = "'${each.value.version_name}'"
  }

  depends_on = [
    aws_api_gateway_integration.versioned_health,
    aws_api_gateway_method_response.versioned_health_200
  ]
}

# ============================================================================
# 多环境阶段配置
# ============================================================================

# 版本化部署资源
resource "aws_api_gateway_deployment" "versioned_deployment" {
  count = 1  # 单一部署支持所有版本

  rest_api_id = module.api_gateway.rest_api_id

  triggers = {
    # 当版本化资源发生变化时重新部署
    redeployment = sha1(jsonencode([
      # 版本化集成
      aws_api_gateway_integration.versioned_create_presentation,
      aws_api_gateway_integration.versioned_get_presentation,
      aws_api_gateway_integration.versioned_download_presentation,
      aws_api_gateway_integration.versioned_modify_slide,
      aws_api_gateway_integration.versioned_get_task,
      aws_api_gateway_integration.versioned_list_presentations,
      aws_api_gateway_integration.versioned_health,
      # 版本化方法响应
      aws_api_gateway_method_response.versioned_create_presentation_202,
      aws_api_gateway_method_response.versioned_get_presentation_200,
      aws_api_gateway_method_response.versioned_download_presentation_200,
      aws_api_gateway_method_response.versioned_modify_slide_200,
      aws_api_gateway_method_response.versioned_get_task_200,
      aws_api_gateway_method_response.versioned_list_presentations_200,
      aws_api_gateway_method_response.versioned_health_200,
      # 集成响应
      aws_api_gateway_integration_response.versioned_health_200,
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }

  depends_on = [
    # 确保所有版本化资源已创建
    aws_api_gateway_integration.versioned_create_presentation,
    aws_api_gateway_integration.versioned_get_presentation,
    aws_api_gateway_integration.versioned_download_presentation,
    aws_api_gateway_integration.versioned_modify_slide,
    aws_api_gateway_integration.versioned_get_task,
    aws_api_gateway_integration.versioned_list_presentations,
    aws_api_gateway_integration.versioned_health,
    # 方法响应
    aws_api_gateway_method_response.versioned_create_presentation_202,
    aws_api_gateway_method_response.versioned_get_presentation_200,
    aws_api_gateway_method_response.versioned_download_presentation_200,
    aws_api_gateway_method_response.versioned_modify_slide_200,
    aws_api_gateway_method_response.versioned_get_task_200,
    aws_api_gateway_method_response.versioned_list_presentations_200,
    aws_api_gateway_method_response.versioned_health_200,
    # 集成响应
    aws_api_gateway_integration_response.versioned_health_200,
    # Lambda权限
    aws_lambda_permission.versioned_api_gateway_permissions,
    aws_lambda_permission.versioned_list_presentations_permissions,
    # 确保Lambda函数和API Gateway已创建
    module.lambda,
    module.api_gateway,
  ]
}

# 版本化阶段配置
resource "aws_api_gateway_stage" "versioned_stages" {
  for_each = var.api_versions

  deployment_id = aws_api_gateway_deployment.versioned_deployment[0].id
  rest_api_id   = module.api_gateway.rest_api_id
  stage_name    = each.value.stage_name

  # 版本特定的配置
  description = each.value.description

  # 缓存配置（根据版本状态调整）
  cache_cluster_enabled = each.value.status == "active" ? true : false
  cache_cluster_size    = each.value.status == "active" ? "0.5" : null

  # X-Ray跟踪
  xray_tracing_enabled = true

  # 访问日志配置
  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.versioned_api_logs[each.key].arn
    format = jsonencode({
      requestId          = "$context.requestId"
      apiVersion         = each.value.version_name
      stage              = each.value.stage_name
      ip                 = "$context.identity.sourceIp"
      caller             = "$context.identity.caller"
      user               = "$context.identity.user"
      requestTime        = "$context.requestTime"
      httpMethod         = "$context.httpMethod"
      resourcePath       = "$context.resourcePath"
      status             = "$context.status"
      protocol           = "$context.protocol"
      responseLength     = "$context.responseLength"
      responseTime       = "$context.responseTime"
      error              = "$context.error.message"
      integrationError   = "$context.integrationErrorMessage"
      requestValidation  = "$context.requestValidationError"
    })
  }


  # 变量设置 - 版本特定信息
  variables = {
    version        = each.value.version_name
    status         = each.value.status
    environment    = var.environment
    deprecation    = each.value.deprecation_date != "" ? each.value.deprecation_date : "none"
  }

  tags = merge(
    local.common_tags,
    {
      Name            = "${var.project_name}-${var.environment}-${each.value.version_name}-stage"
      Version         = each.value.version_name
      Status          = each.value.status
      DeprecationDate = each.value.deprecation_date != "" ? each.value.deprecation_date : "none"
    }
  )

  depends_on = [
    aws_api_gateway_deployment.versioned_deployment,
    aws_cloudwatch_log_group.versioned_api_logs
  ]
}

# 版本化阶段的方法设置
resource "aws_api_gateway_method_settings" "versioned_stage_settings" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  stage_name  = aws_api_gateway_stage.versioned_stages[each.key].stage_name
  method_path = "*/*"

  settings {
    # 日志级别
    logging_level = "INFO"
    
    # 数据跟踪（根据版本配置）
    data_trace_enabled = each.value.version_name == "v1" ? true : false
    
    # 指标启用
    metrics_enabled = true
    
    # 缓存配置
    caching_enabled      = each.value.status == "active"
    cache_ttl_in_seconds = each.value.status == "active" ? 300 : 0
    
    # 限流配置（根据版本状态调整）
    throttling_rate_limit  = each.value.status == "active" ? var.api_throttle_rate_limit : var.api_throttle_rate_limit * 0.5
    throttling_burst_limit = each.value.status == "active" ? var.api_throttle_burst_limit : var.api_throttle_burst_limit * 0.5
  }

  depends_on = [
    aws_api_gateway_stage.versioned_stages
  ]
}

# 版本化CloudWatch日志组
resource "aws_cloudwatch_log_group" "versioned_api_logs" {
  for_each = var.api_versions

  name              = "/aws/apigateway/${var.project_name}-${var.environment}-${each.value.version_name}"
  retention_in_days = var.log_retention_days

  tags = merge(
    local.common_tags,
    {
      Name    = "${var.project_name}-${var.environment}-${each.value.version_name}-logs"
      Version = each.value.version_name
      Status  = each.value.status
    }
  )
}

# ============================================================================
# 版本化使用计划和API密钥
# ============================================================================

# 为每个版本创建使用计划
resource "aws_api_gateway_usage_plan" "versioned_usage_plans" {
  for_each = var.api_versions

  name        = "${var.project_name}-${var.environment}-${each.value.version_name}-usage-plan"
  description = "Usage plan for ${var.project_name} ${each.value.version_name} (${each.value.status})"

  api_stages {
    api_id = module.api_gateway.rest_api_id
    stage  = aws_api_gateway_stage.versioned_stages[each.key].stage_name
  }

  # 配额设置（根据版本状态调整）
  quota_settings {
    limit  = each.value.status == "active" ? var.api_quota_limit : var.api_quota_limit * 0.5
    period = var.api_quota_period
  }

  # 限流设置（根据版本状态调整）
  throttle_settings {
    rate_limit  = each.value.status == "active" ? var.api_throttle_rate_limit : var.api_throttle_rate_limit * 0.5
    burst_limit = each.value.status == "active" ? var.api_throttle_burst_limit : var.api_throttle_burst_limit * 0.5
  }

  tags = merge(
    local.common_tags,
    {
      Name            = "${var.project_name}-${var.environment}-${each.value.version_name}-usage-plan"
      Version         = each.value.version_name
      Status          = each.value.status
      Environment     = var.environment
    }
  )

  depends_on = [
    aws_api_gateway_stage.versioned_stages
  ]
}

# 关联API密钥与版本化使用计划
resource "aws_api_gateway_usage_plan_key" "versioned_usage_plan_keys" {
  for_each = var.api_versions

  key_id        = module.api_gateway.api_key_id
  key_type      = "API_KEY"
  usage_plan_id = aws_api_gateway_usage_plan.versioned_usage_plans[each.key].id

  depends_on = [
    aws_api_gateway_usage_plan.versioned_usage_plans,
    module.api_gateway
  ]
}

# ============================================================================
# 版本化CORS配置
# ============================================================================

# 为版本化资源添加CORS支持
# Note: CORS模块在for_each中有问题，暂时注释掉
# 将使用直接的CORS资源定义

# OPTIONS方法为版本化端点
resource "aws_api_gateway_method" "versioned_presentations_options" {
  for_each = var.api_versions

  rest_api_id   = module.api_gateway.rest_api_id
  resource_id   = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method   = "OPTIONS"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "versioned_presentations_options" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_presentations_options[each.key].http_method

  type = "MOCK"

  request_templates = {
    "application/json" = jsonencode({
      statusCode = 200
    })
  }
}

resource "aws_api_gateway_method_response" "versioned_presentations_options_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_presentations_options[each.key].http_method
  status_code = "200"

  response_parameters = {
    "method.response.header.Access-Control-Allow-Headers" = true
    "method.response.header.Access-Control-Allow-Methods" = true
    "method.response.header.Access-Control-Allow-Origin"  = true
    "method.response.header.API-Version"                  = true
  }
}

resource "aws_api_gateway_integration_response" "versioned_presentations_options_200" {
  for_each = var.api_versions

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.versioned_presentations[each.key].id
  http_method = aws_api_gateway_method.versioned_presentations_options[each.key].http_method
  status_code = aws_api_gateway_method_response.versioned_presentations_options_200[each.key].status_code

  response_parameters = {
    "method.response.header.Access-Control-Allow-Headers" = "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,API-Version'"
    "method.response.header.Access-Control-Allow-Methods" = "'GET,POST,OPTIONS'"
    "method.response.header.Access-Control-Allow-Origin"  = "'*'"
    "method.response.header.API-Version"                  = "'${each.value.version_name}'"
  }

  depends_on = [
    aws_api_gateway_integration.versioned_presentations_options,
    aws_api_gateway_method_response.versioned_presentations_options_200
  ]
}

# ============================================================================
# 向后兼容性处理
# ============================================================================

# 为根级别的API端点创建重定向到v1版本
resource "aws_api_gateway_resource" "compatibility_redirect" {
  count = 1

  rest_api_id = module.api_gateway.rest_api_id
  parent_id   = module.api_gateway.rest_api_root_resource_id
  path_part   = "redirect"
}

# 重定向方法 - 将根级别请求重定向到默认版本
resource "aws_api_gateway_method" "compatibility_redirect" {
  count = 1

  rest_api_id   = module.api_gateway.rest_api_id
  resource_id   = aws_api_gateway_resource.compatibility_redirect[0].id
  http_method   = "ANY"
  authorization = "NONE"
}

# 重定向集成
resource "aws_api_gateway_integration" "compatibility_redirect" {
  count = 1

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.compatibility_redirect[0].id
  http_method = aws_api_gateway_method.compatibility_redirect[0].http_method

  type = "MOCK"

  request_templates = {
    "application/json" = jsonencode({
      statusCode = 302
    })
  }

  depends_on = [aws_api_gateway_method.compatibility_redirect]
}

# 重定向响应
resource "aws_api_gateway_method_response" "compatibility_redirect_302" {
  count = 1

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.compatibility_redirect[0].id
  http_method = aws_api_gateway_method.compatibility_redirect[0].http_method
  status_code = "302"

  response_parameters = {
    "method.response.header.Location"    = true
    "method.response.header.API-Version" = true
  }
}

# 重定向集成响应
resource "aws_api_gateway_integration_response" "compatibility_redirect_302" {
  count = 1

  rest_api_id = module.api_gateway.rest_api_id
  resource_id = aws_api_gateway_resource.compatibility_redirect[0].id
  http_method = aws_api_gateway_method.compatibility_redirect[0].http_method
  status_code = aws_api_gateway_method_response.compatibility_redirect_302[0].status_code

  response_parameters = {
    "method.response.header.Location"    = "'/v1$context.path'"
    "method.response.header.API-Version" = "'v1'"
  }

  depends_on = [
    aws_api_gateway_integration.compatibility_redirect,
    aws_api_gateway_method_response.compatibility_redirect_302
  ]
}

# ============================================================================
# 输出信息
# ============================================================================

output "versioned_api_endpoints" {
  description = "版本化API端点信息"
  value = {
    for version_key, version_config in var.api_versions : version_key => {
      version_name = version_config.version_name
      stage_url    = "https://${module.api_gateway.rest_api_id}.execute-api.${var.aws_region}.amazonaws.com/${version_config.stage_name}"
      status       = version_config.status
      endpoints = {
        presentations = {
          create   = "POST /${version_config.version_name}/presentations"
          list     = "GET /${version_config.version_name}/presentations"
          get      = "GET /${version_config.version_name}/presentations/{id}"
          download = "GET /${version_config.version_name}/presentations/{id}/download"
        }
        slides = {
          modify = "PATCH /${version_config.version_name}/presentations/{id}/slides/{slideId}"
        }
        tasks = {
          get = "GET /${version_config.version_name}/tasks/{task_id}"
        }
        health = {
          check = "GET /${version_config.version_name}/health"
        }
      }
    }
  }
}

output "api_versioning_summary" {
  description = "API版本控制摘要信息"
  value = {
    total_versions       = length(var.api_versions)
    active_versions     = [for k, v in var.api_versions : k if v.status == "active"]
    deprecated_versions = [for k, v in var.api_versions : k if v.status == "deprecated"]
    default_version     = [for k, v in var.api_versions : k if v.is_default][0]
    stage_mapping = {
      for k, v in var.api_versions : k => {
        stage_name = v.stage_name
        status     = v.status
        url        = "https://${module.api_gateway.rest_api_id}.execute-api.${var.aws_region}.amazonaws.com/${v.stage_name}"
      }
    }
    deprecation_schedule = {
      for k, v in var.api_versions : k => {
        version        = k
        deprecation_date = v.deprecation_date != "" ? v.deprecation_date : "none"
        status         = v.status
      }
    }
  }
}