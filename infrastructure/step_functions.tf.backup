# Step Functions for PPT Generation Workflow
# This configuration enables parallel processing for improved performance

# IAM Role for Step Functions
resource "aws_iam_role" "step_functions_role" {
  name = "ai-ppt-step-functions-role-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "states.amazonaws.com"
      }
    }]
  })

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

# IAM Policy for Step Functions
resource "aws_iam_role_policy" "step_functions_policy" {
  name = "step-functions-policy"
  role = aws_iam_role.step_functions_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "lambda:InvokeFunction",
          "lambda:InvokeAsync"
        ]
        Resource = [
          aws_lambda_function.generate_ppt.arn,
          aws_lambda_function.content_generator.arn,
          aws_lambda_function.image_generator.arn,
          aws_lambda_function.compile_ppt.arn,
          aws_lambda_function.workflow_orchestrator.arn,
          "${aws_lambda_function.generate_ppt.arn}:*",
          "${aws_lambda_function.content_generator.arn}:*",
          "${aws_lambda_function.image_generator.arn}:*",
          "${aws_lambda_function.compile_ppt.arn}:*",
          "${aws_lambda_function.workflow_orchestrator.arn}:*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "xray:PutTraceSegments",
          "xray:PutTelemetryRecords"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogDelivery",
          "logs:GetLogDelivery",
          "logs:UpdateLogDelivery",
          "logs:DeleteLogDelivery",
          "logs:ListLogDeliveries",
          "logs:PutResourcePolicy",
          "logs:DescribeResourcePolicies",
          "logs:DescribeLogGroups"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "cloudwatch:PutMetricData"
        ]
        Resource = "*"
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject"
        ]
        Resource = "${aws_s3_bucket.presentations.arn}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:Query"
        ]
        Resource = aws_dynamodb_table.ppt_tasks.arn
      }
    ]
  })
}

# DynamoDB Table for Task Management
resource "aws_dynamodb_table" "ppt_tasks" {
  name           = "ai-ppt-tasks-${var.environment}"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "task_id"
  range_key      = "created_at"

  attribute {
    name = "task_id"
    type = "S"
  }

  attribute {
    name = "created_at"
    type = "N"
  }

  attribute {
    name = "status"
    type = "S"
  }

  attribute {
    name = "user_id"
    type = "S"
  }

  global_secondary_index {
    name            = "status-index"
    hash_key        = "status"
    range_key       = "created_at"
    projection_type = "ALL"
  }

  global_secondary_index {
    name            = "user-index"
    hash_key        = "user_id"
    range_key       = "created_at"
    projection_type = "ALL"
  }

  ttl {
    attribute_name = "ttl"
    enabled        = true
  }

  point_in_time_recovery {
    enabled = true
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

# Lambda Function - Content Generator (for parallel processing)
resource "aws_lambda_function" "content_generator" {
  filename         = "../lambda-packages/content_generator.zip"
  function_name    = "ai-ppt-content-generator-${var.environment}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "lambda_function.handler"
  runtime         = "python3.11"
  memory_size     = 3008  # Maximum memory for better performance
  timeout         = 60
  reserved_concurrent_executions = 50  # Reserve capacity for parallel processing

  layers = [aws_lambda_layer_version.dependencies.arn]

  environment {
    variables = {
      S3_BUCKET    = aws_s3_bucket.presentations.id
      ENVIRONMENT  = var.environment
      MAX_RETRIES  = "3"
      BEDROCK_MODEL = "anthropic.claude-3-sonnet-20240229"
    }
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
    Type        = "content-processor"
  }
}

# Lambda Function - Image Generator (for parallel processing)
resource "aws_lambda_function" "image_generator" {
  filename         = "../lambda-packages/image_generator.zip"
  function_name    = "ai-ppt-image-generator-${var.environment}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "lambda_function.handler"
  runtime         = "python3.11"
  memory_size     = 3008
  timeout         = 90
  reserved_concurrent_executions = 30  # Reserve capacity for image generation

  layers = [aws_lambda_layer_version.dependencies.arn]

  environment {
    variables = {
      S3_BUCKET    = aws_s3_bucket.presentations.id
      ENVIRONMENT  = var.environment
      MAX_RETRIES  = "2"
      IMAGE_MODEL  = "stability.stable-diffusion-xl-v1"
    }
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
    Type        = "image-processor"
  }
}

# Lambda Function - PPT Compiler
resource "aws_lambda_function" "compile_ppt" {
  filename         = "../lambda-packages/compile_ppt.zip"
  function_name    = "ai-ppt-compiler-${var.environment}"
  role            = aws_iam_role.lambda_role.arn
  handler         = "lambda_function.handler"
  runtime         = "python3.11"
  memory_size     = 2048
  timeout         = 60

  layers = [aws_lambda_layer_version.dependencies.arn]

  environment {
    variables = {
      S3_BUCKET   = aws_s3_bucket.presentations.id
      ENVIRONMENT = var.environment
    }
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
    Type        = "compiler"
  }
}

# Lambda Function - Workflow Orchestrator
resource "aws_lambda_function" "workflow_orchestrator" {
  filename         = "../lambda-packages/workflow_orchestrator.zip"
  function_name    = "ai-ppt-workflow-orchestrator-${var.environment}"
  role            = aws_iam_role.lambda_orchestrator_role.arn
  handler         = "lambda_function.handler"
  runtime         = "python3.11"
  memory_size     = 1024
  timeout         = 30

  layers = [aws_lambda_layer_version.dependencies.arn]

  environment {
    variables = {
      STATE_MACHINE_ARN = aws_sfn_state_machine.ppt_generation.arn
      DYNAMODB_TABLE    = aws_dynamodb_table.ppt_tasks.name
      S3_BUCKET         = aws_s3_bucket.presentations.id
      ENVIRONMENT       = var.environment
    }
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
    Type        = "orchestrator"
  }
}

# Enhanced IAM Role for Workflow Orchestrator
resource "aws_iam_role" "lambda_orchestrator_role" {
  name = "ai-ppt-lambda-orchestrator-role-${var.environment}"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy" "lambda_orchestrator_policy" {
  name = "orchestrator-policy"
  role = aws_iam_role.lambda_orchestrator_role.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "states:StartExecution",
          "states:StopExecution",
          "states:DescribeExecution",
          "states:GetExecutionHistory"
        ]
        Resource = [
          aws_sfn_state_machine.ppt_generation.arn,
          "${aws_sfn_state_machine.ppt_generation.arn}:*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:Query"
        ]
        Resource = [
          aws_dynamodb_table.ppt_tasks.arn,
          "${aws_dynamodb_table.ppt_tasks.arn}/index/*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject"
        ]
        Resource = "${aws_s3_bucket.presentations.arn}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = "arn:aws:logs:*:*:*"
      }
    ]
  })
}

# CloudWatch Log Group for Step Functions
resource "aws_cloudwatch_log_group" "step_functions_logs" {
  name              = "/aws/vendedlogs/states/ai-ppt-workflow-${var.environment}"
  retention_in_days = 7

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

# Step Functions State Machine
resource "aws_sfn_state_machine" "ppt_generation" {
  name     = "ai-ppt-generation-workflow-${var.environment}"
  role_arn = aws_iam_role.step_functions_role.arn
  type     = "EXPRESS"  # Use EXPRESS for high-volume, short-duration workflows

  definition = file("${path.module}/workflows/ppt_generation_workflow.json")

  logging_configuration {
    log_destination        = "${aws_cloudwatch_log_group.step_functions_logs.arn}:*"
    include_execution_data = true
    level                  = "ALL"
  }

  tracing_configuration {
    enabled = true
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

# CloudWatch Alarms for monitoring
resource "aws_cloudwatch_metric_alarm" "workflow_errors" {
  alarm_name          = "ai-ppt-workflow-errors-${var.environment}"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "ExecutionsFailed"
  namespace           = "AWS/States"
  period              = "60"
  statistic           = "Sum"
  threshold           = "5"
  alarm_description   = "This metric monitors workflow execution failures"

  dimensions = {
    StateMachineArn = aws_sfn_state_machine.ppt_generation.arn
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

resource "aws_cloudwatch_metric_alarm" "workflow_duration" {
  alarm_name          = "ai-ppt-workflow-duration-${var.environment}"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "ExecutionTime"
  namespace           = "AWS/States"
  period              = "300"
  statistic           = "Average"
  threshold           = "30000"  # 30 seconds in milliseconds
  alarm_description   = "Alert when workflow takes longer than 30 seconds"

  dimensions = {
    StateMachineArn = aws_sfn_state_machine.ppt_generation.arn
  }

  tags = {
    Environment = var.environment
    Project     = "ai-ppt-assistant"
  }
}

# CloudWatch Dashboard for monitoring
resource "aws_cloudwatch_dashboard" "ppt_workflow" {
  dashboard_name = "ai-ppt-workflow-${var.environment}"

  dashboard_body = jsonencode({
    widgets = [
      {
        type = "metric"
        properties = {
          metrics = [
            ["AWS/States", "ExecutionsSucceeded", { stat = "Sum", label = "Successful Executions" }],
            [".", "ExecutionsFailed", { stat = "Sum", label = "Failed Executions" }],
            [".", "ExecutionsAborted", { stat = "Sum", label = "Aborted Executions" }],
            [".", "ExecutionsTimedOut", { stat = "Sum", label = "Timed Out Executions" }]
          ]
          view    = "timeSeries"
          stacked = false
          region  = var.aws_region
          title   = "Workflow Execution Status"
          period  = 300
        }
      },
      {
        type = "metric"
        properties = {
          metrics = [
            ["AWS/States", "ExecutionTime", { stat = "Average", label = "Average Duration" }],
            [".", ".", { stat = "Maximum", label = "Max Duration" }],
            [".", ".", { stat = "Minimum", label = "Min Duration" }]
          ]
          view    = "timeSeries"
          stacked = false
          region  = var.aws_region
          title   = "Workflow Execution Time"
          period  = 300
          yAxis = {
            left = {
              min = 0
              max = 60000
            }
          }
        }
      },
      {
        type = "metric"
        properties = {
          metrics = [
            ["AWS/Lambda", "ConcurrentExecutions", { stat = "Maximum", label = "Max Concurrent" }],
            [".", "Duration", { stat = "Average", label = "Average Duration" }],
            [".", "Errors", { stat = "Sum", label = "Errors" }],
            [".", "Throttles", { stat = "Sum", label = "Throttles" }]
          ]
          view    = "timeSeries"
          stacked = false
          region  = var.aws_region
          title   = "Lambda Performance Metrics"
          period  = 300
        }
      }
    ]
  })
}

# Outputs
output "state_machine_arn" {
  value       = aws_sfn_state_machine.ppt_generation.arn
  description = "Step Functions State Machine ARN"
}

output "dynamodb_table_name" {
  value       = aws_dynamodb_table.ppt_tasks.name
  description = "DynamoDB table name for task management"
}

output "workflow_orchestrator_function" {
  value       = aws_lambda_function.workflow_orchestrator.function_name
  description = "Workflow orchestrator Lambda function name"
}

output "cloudwatch_dashboard_url" {
  value       = "https://console.aws.amazon.com/cloudwatch/home?region=${var.aws_region}#dashboards:name=${aws_cloudwatch_dashboard.ppt_workflow.dashboard_name}"
  description = "CloudWatch Dashboard URL for monitoring"
}