# Lambda Environment Variable Fixes
# This file fixes the DynamoDB table name configuration issues

# Override the Lambda module outputs to fix environment variables
locals {
  # Correct table names from DynamoDB module
  tasks_table_name       = module.dynamodb.tasks_table_name != null ? module.dynamodb.tasks_table_name : "${var.project_name}-${var.environment}-tasks"
  sessions_table_name    = module.dynamodb.table_name  # This is actually the sessions table
  checkpoints_table_name = module.dynamodb.checkpoints_table_name
}

# Fix for generate_presentation Lambda function environment variables
resource "null_resource" "fix_lambda_env_generate_presentation" {
  triggers = {
    lambda_function_name = module.lambda.lambda_function_names["api_generate_presentation"]
    tasks_table          = local.tasks_table_name
  }

  provisioner "local-exec" {
    command = <<EOF
aws lambda update-function-configuration \
  --function-name ${module.lambda.lambda_function_names["api_generate_presentation"]} \
  --environment Variables='{
    "DYNAMODB_TABLE":"${local.tasks_table_name}",
    "DYNAMODB_TASKS_TABLE":"${local.tasks_table_name}",
    "DYNAMODB_SESSIONS_TABLE":"${local.sessions_table_name}",
    "DYNAMODB_CHECKPOINTS_TABLE":"${local.checkpoints_table_name}",
    "S3_BUCKET":"${module.s3.bucket_name}",
    "SQS_QUEUE_URL":"${aws_sqs_queue.task_queue.url}",
    "ORCHESTRATOR_AGENT_ID":"${module.lambda.orchestrator_agent_id}",
    "ORCHESTRATOR_ALIAS_ID":"${module.lambda.orchestrator_alias_id}",
    "LOG_LEVEL":"INFO"
  }' \
  --region ${var.aws_region}
EOF
  }

  depends_on = [
    module.lambda,
    module.dynamodb,
    aws_sqs_queue.task_queue
  ]
}

# Fix for presentation_status Lambda function
resource "null_resource" "fix_lambda_env_presentation_status" {
  triggers = {
    lambda_function_name = module.lambda.lambda_function_names["api_presentation_status"]
    tasks_table          = local.tasks_table_name
  }

  provisioner "local-exec" {
    command = <<EOF
aws lambda update-function-configuration \
  --function-name ${module.lambda.lambda_function_names["api_presentation_status"]} \
  --environment Variables='{
    "DYNAMODB_TABLE":"${local.tasks_table_name}",
    "DYNAMODB_TASKS_TABLE":"${local.tasks_table_name}",
    "DYNAMODB_SESSIONS_TABLE":"${local.sessions_table_name}",
    "LOG_LEVEL":"INFO"
  }' \
  --region ${var.aws_region}
EOF
  }

  depends_on = [
    module.lambda,
    module.dynamodb
  ]
}

# Fix for presentation_download Lambda function
resource "null_resource" "fix_lambda_env_presentation_download" {
  triggers = {
    lambda_function_name = module.lambda.lambda_function_names["api_presentation_download"]
    tasks_table          = local.tasks_table_name
  }

  provisioner "local-exec" {
    command = <<EOF
aws lambda update-function-configuration \
  --function-name ${module.lambda.lambda_function_names["api_presentation_download"]} \
  --environment Variables='{
    "DYNAMODB_TABLE":"${local.tasks_table_name}",
    "DYNAMODB_TASKS_TABLE":"${local.tasks_table_name}",
    "S3_BUCKET":"${module.s3.bucket_name}",
    "DOWNLOAD_EXPIRY_SECONDS":"3600",
    "LOG_LEVEL":"INFO"
  }' \
  --region ${var.aws_region}
EOF
  }

  depends_on = [
    module.lambda,
    module.dynamodb,
    module.s3
  ]
}