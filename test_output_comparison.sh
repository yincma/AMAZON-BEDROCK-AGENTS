#!/bin/bash

# 测试输出精简效果的对比脚本

echo "=========================================="
echo "📊 部署输出对比测试"
echo "=========================================="
echo ""

# 模拟原始输出
echo "1️⃣ 原始输出示例（详细版）："
echo "----------------------------------------"
echo "Building Lambda layer with requirements.txt..."
echo "Collecting boto3==1.26.137"
echo "  Downloading boto3-1.26.137-py3-none-any.whl (135 kB)"
echo "     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 135.6/135.6 kB 2.3 MB/s eta 0:00:00"
echo "Collecting botocore==1.29.137"
echo "  Downloading botocore-1.29.137-py3-none-any.whl (10.9 MB)"
echo "     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 10.9/10.9 MB 11.2 MB/s eta 0:00:00"
echo "Successfully installed boto3-1.26.137 botocore-1.29.137..."
echo "Packaging API function: generate_presentation..."
echo "Packaging API function: get_task..."
echo "Packaging API function: list_presentations..."
echo "... (还有19个函数输出)"
echo "Creating aws_lambda_function.generate_presentation..."
echo "Creating aws_lambda_function.get_task..."
echo "... (Terraform 创建100+资源)"
echo ""

echo "2️⃣ 精简输出示例（新版）："
echo "----------------------------------------"
echo "🔨 Building optimized Lambda layers..."
echo "  ✅ Minimal layer built: 8MB"
echo "  ✅ Content layer built: 22MB"
echo "  ✅ Legacy layer built: 45MB"
echo "📦 Packaging Lambda functions..."
echo "  📂 API functions: 8 | Controller functions: 14"
echo "  ✅ Lambda functions packaged"
echo "🚀 Deploying infrastructure with Terraform..."
echo "  Apply complete! Resources: 45 added, 0 changed, 0 destroyed."
echo "🔧 更新API配置..."
echo "  ✅ API Gateway URL: https://xxx.execute-api.us-east-1.amazonaws.com/legacy"
echo "  ✅ API Key: abcd****wxyz"
echo ""

echo "=========================================="
echo "📈 输出对比总结："
echo "=========================================="
echo "• 原始输出: ~200-300行"
echo "• 精简输出: ~15-20行"
echo "• 减少比例: 约90%"
echo "• 保留信息: 所有关键状态和配置"
echo ""
echo "💡 使用说明："
echo "• make deploy-with-config         - 精简输出（推荐日常使用）"
echo "• make deploy-with-config-verbose - 详细输出（调试时使用）"
echo ""