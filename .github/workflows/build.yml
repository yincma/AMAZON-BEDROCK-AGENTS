name: Lambda Layer Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lambdas/layers/**'
      - '.github/workflows/build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'lambdas/layers/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      build_method:
        description: 'Build method'
        required: true
        default: 'docker'
        type: choice
        options:
        - docker
        - local
      upload_to_aws:
        description: 'Upload to AWS Lambda'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  ARCHITECTURE: 'arm64'
  LAYER_NAME: 'ai-ppt-assistant-dependencies'

jobs:
  validate-requirements:
    name: Validate Requirements
    runs-on: ubuntu-latest
    outputs:
      requirements-changed: ${{ steps.check-changes.outputs.changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check requirements changes
        id: check-changes
        run: |
          if git diff HEAD^ HEAD --name-only | grep -E "lambdas/layers/requirements\.txt$"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Requirements.txt has been modified"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes to requirements.txt"
          fi

      - name: Validate requirements.txt
        working-directory: lambdas/layers
        run: |
          if [ ! -f requirements.txt ]; then
            echo "Error: requirements.txt not found"
            exit 1
          fi
          
          echo "Checking for problematic package versions..."
          if grep -q "aws-lambda-powertools==2.39.0" requirements.txt; then
            echo "Warning: aws-lambda-powertools 2.39.0 has known issues"
            echo "Consider using 2.38.0 for stability"
          fi
          
          echo "Validating requirements syntax..."
          python -m pip install --dry-run -r requirements.txt || exit 1
          
          echo "Requirements validation completed"

  build-layer-docker:
    name: Build Layer (Docker)
    runs-on: ubuntu-latest
    needs: validate-requirements
    strategy:
      matrix:
        build-method: [docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Configure AWS credentials
        if: ${{ github.event.inputs.upload_to_aws == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Build Lambda layer (Docker)
        working-directory: lambdas/layers
        run: |
          echo "Building Lambda layer using Docker method..."
          chmod +x docker-build.sh
          ./docker-build.sh --keep-docker

      - name: Verify layer package
        working-directory: lambdas/layers
        run: |
          if [ ! -f dist/${LAYER_NAME}.zip ]; then
            echo "Error: Layer package not found"
            exit 1
          fi
          
          SIZE=$(du -h dist/${LAYER_NAME}.zip | cut -f1)
          echo "Layer package size: $SIZE"
          
          # Check if size is reasonable (under 45MB zipped)
          SIZE_BYTES=$(stat -c%s dist/${LAYER_NAME}.zip)
          MAX_SIZE=$((45 * 1024 * 1024))
          
          if [ $SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "Warning: Layer package size ($SIZE) is quite large"
            echo "Consider optimizing dependencies"
          fi
          
          echo "Layer verification completed"

      - name: Test layer contents
        working-directory: lambdas/layers
        run: |
          echo "Testing layer structure..."
          unzip -t dist/${LAYER_NAME}.zip
          
          echo "Checking Python packages..."
          unzip -l dist/${LAYER_NAME}.zip | grep -E "(boto3|aws_lambda_powertools|pillow)" || {
            echo "Warning: Key packages not found in layer"
          }
          
          echo "Layer content verification completed"

      - name: Upload layer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer-${{ matrix.build-method }}-${{ github.run_number }}
          path: |
            lambdas/layers/dist/*.zip
            lambdas/layers/dist/*.json
          retention-days: 30

      - name: Deploy to AWS Lambda (if requested)
        if: ${{ github.event.inputs.upload_to_aws == 'true' }}
        working-directory: lambdas/layers
        run: |
          echo "Uploading layer to AWS Lambda..."
          
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${LAYER_NAME} \
            --description "Docker-built dependencies for AI PPT Assistant (Build ${{ github.run_number }})" \
            --zip-file fileb://dist/${LAYER_NAME}.zip \
            --compatible-runtimes python${PYTHON_VERSION} \
            --compatible-architectures ${ARCHITECTURE} \
            --query 'Version' \
            --output text)
          
          echo "Layer version created: $LAYER_VERSION"
          echo "layer-version=$LAYER_VERSION" >> $GITHUB_OUTPUT
          
          # Save layer ARN for other workflows
          LAYER_ARN=$(aws lambda get-layer-version \
            --layer-name ${LAYER_NAME} \
            --version-number $LAYER_VERSION \
            --query 'LayerVersionArn' \
            --output text)
          
          echo "Layer ARN: $LAYER_ARN"
          echo "layer-arn=$LAYER_ARN" >> $GITHUB_OUTPUT

  build-layer-local:
    name: Build Layer (Local)
    runs-on: ubuntu-latest
    needs: validate-requirements
    if: ${{ github.event.inputs.build_method == 'local' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Build Lambda layer (Local)
        working-directory: lambdas/layers
        run: |
          echo "Warning: Building with local Python (may have compatibility issues)"
          chmod +x build.sh
          ./build.sh --local

      - name: Upload local build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer-local-${{ github.run_number }}
          path: |
            lambdas/layers/dist/*.zip
            lambdas/layers/dist/*.json
          retention-days: 15

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-layer-docker]
    if: ${{ always() && needs.build-layer-docker.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download layer artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer-docker-${{ github.run_number }}
          path: artifacts/

      - name: Security scan requirements
        working-directory: lambdas/layers
        run: |
          echo "Scanning requirements for known vulnerabilities..."
          
          # Install safety for Python package vulnerability scanning
          pip install safety
          
          # Scan requirements
          safety check -r requirements.txt --output json > safety-report.json || {
            echo "Security issues found in requirements"
            cat safety-report.json
          }

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.run_number }}
          path: lambdas/layers/safety-report.json
          retention-days: 90

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [build-layer-docker]
    if: ${{ always() && needs.build-layer-docker.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download layer artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-layer-docker-${{ github.run_number }}
          path: layer-artifacts/

      - name: Test layer installation
        run: |
          echo "Testing layer package installation..."
          
          # Extract layer to test directory
          mkdir -p test-layer
          cd test-layer
          unzip ../layer-artifacts/${LAYER_NAME}.zip
          
          # Test Python imports
          export PYTHONPATH="$PWD/python/lib/python${PYTHON_VERSION}/site-packages:$PYTHONPATH"
          
          python -c "
          import sys
          print('Python version:', sys.version)
          
          # Test core imports
          try:
              import boto3
              print('✅ boto3 imported successfully')
          except ImportError as e:
              print('❌ boto3 import failed:', e)
              sys.exit(1)
          
          try:
              from aws_lambda_powertools import Logger, Tracer, Metrics
              print('✅ aws-lambda-powertools imported successfully')
          except ImportError as e:
              print('❌ aws-lambda-powertools import failed:', e)
              sys.exit(1)
          
          try:
              from PIL import Image
              print('✅ Pillow imported successfully')
          except ImportError as e:
              print('❌ Pillow import failed:', e)
              sys.exit(1)
          
          try:
              from pptx import Presentation
              print('✅ python-pptx imported successfully')
          except ImportError as e:
              print('❌ python-pptx import failed:', e)
              sys.exit(1)
          
          print('All imports successful!')
          "

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-layer-docker, build-layer-local, security-scan, integration-test]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Build Method: ${{ github.event.inputs.build_method || 'docker' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python Version: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Architecture: ${{ env.ARCHITECTURE }}" >> $GITHUB_STEP_SUMMARY
          echo "- Layer Name: ${{ env.LAYER_NAME }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-layer-docker.result }}" == "success" ]]; then
            echo "✅ Docker build completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ Integration tests passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration tests failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the layer artifact from this build" >> $GITHUB_STEP_SUMMARY
          echo "2. Test in your Lambda functions" >> $GITHUB_STEP_SUMMARY
          echo "3. Update Terraform configurations if needed" >> $GITHUB_STEP_SUMMARY